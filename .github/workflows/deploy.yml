# Cloudflare Pages Deployment
#
# Prerequisites (managed in parent cloudflare-management repo):
# - Cloudflare Pages project "no-strings-resume" created via Terraform
# - DNS CNAME resume.pythonaisolutions.com â†’ no-strings-resume.pages.dev
# - Custom domain configured in Pages project
#
# GitHub secret required:
# - CF_API_KEY: Cloudflare API token with Pages Edit permission

name: Deploy to Cloudflare Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  deployments: write

env:
  PROJECT_NAME: no-strings-resume
  BUILD_DIR: dist

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Build for production
        run: npm run build

      - name: Install wrangler
        run: npm install -g wrangler

      - name: Deploy preview
        if: ${{ github.event_name == 'pull_request' }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_KEY }}
        run: wrangler pages deploy ./${{ env.BUILD_DIR }} --project-name ${{ env.PROJECT_NAME }} --branch ${{ github.head_ref }}

      - name: Deploy production
        if: ${{ github.event_name == 'push' }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_KEY }}
        run: wrangler pages deploy ./${{ env.BUILD_DIR }} --project-name ${{ env.PROJECT_NAME }} --branch main --commit-dirty=true
